apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: kubeflow-r-train-
spec:
  entrypoint: workflow
  arguments:
    parameters:
    - name: version
      value: 0.1
    - name: github-user
      value: kubeflow
    - name: github-revision
      value: master
    - name: docker-org
      value: seldonio
    - name: build-push-image
      value: false
  volumes:
  - name: docker-config
    secret:
      secretName: docker-config     # name of an existing k8s secret
  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 0.5Gi
  templates:
  - name: workflow
    steps:
    - - name: get-source
        template: get-source-code
    - - name: build-push
        template: build-and-push
        when: "{{workflow.parameters.build-push-image}} == true"
    - - name: train
        template: tfjob
  - name: get-source-code
    inputs:
      artifacts:
      - name: argo-source
        path: /src/example-seldon
        git:
          repo: https://github.com/{{workflow.parameters.github-user}}/example-seldon.git
          revision: "{{workflow.parameters.github-revision}}"
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["cp /src/example-seldon/models/r_mnist/train/* /workspace/; ls /workspace/"]
      volumeMounts:
      - name: workspace
        mountPath: /workspace
  - name: build-and-push
    container:
      image: gcr.io/kaniko-project/executor:latest
      args: ["--dockerfile","Dockerfile","--destination","{{workflow.parameters.docker-org}}/rmnistclassifier_trainer:{{workflow.parameters.version}}"]
      workingDir: /src/example-seldon/models/r_mnist/train/
      volumeMounts:
      - name: docker-config
        mountPath: "/root/.docker/"
      - name: workspace
        mountPath: /workspace
  - name: tfjob
    resource:                   #indicates that this is a resource template
      action: create             #can be any kubectl action (e.g. create, delete, apply, patch)
      successCondition: status.succeeded == 1
      manifest: |   #put your kubernetes spec here
       apiVersion: "batch/v1"
       kind: "Job"
       metadata:
         name: "r-train"
         ownerReferences:
         - apiVersion: argoproj.io/v1alpha1
           kind: Workflow
           controller: true
           name: {{workflow.name}}
           uid: {{workflow.uid}}
       spec:
         template:
           metadata:
             name: "r-train"
           spec:
             containers:
               -
                 image: "{{workflow.parameters.docker-org}}/rmnistclassifier_trainer:{{workflow.parameters.version}}"
                 name: "r-train"
                 volumeMounts:
                   -
                     mountPath: "/data"
                     name: "persistent-storage"
             restartPolicy: "Never"
             volumes:
               -
                 name: "persistent-storage"
                 persistentVolumeClaim:
                   claimName: "nfs-1"
