# This example demonstrates the use of a git repo as a hard-wired
# input artifact. The argo repo is cloned to its target destination
# at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: seldon-r-deploy-
spec:
  entrypoint: workflow
  arguments:
    parameters:
    - name: version
      value: 0.1
    - name: github-user
      value: kubeflow
    - name: github-revision
      value: master
    - name: docker-org
      value: index.docker.io/seldonio
    - name: build-push-image
      value: false
    - name: deploy-model
      value: false
  volumes:
  - name: docker-config
    secret:
      secretName: docker-config     # name of an existing k8s secret
  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 0.5Gi
  templates:
  - name: workflow
    steps:
    - - name: get-source
        template: get-source-code
    - - name: build-push
        template: build-and-push
        when: "{{workflow.parameters.build-push-image}} == true"
    - - name: serve
        template: seldon
        when: "{{workflow.parameters.deploy-model}} == true"
  - name: get-source-code
    inputs:
      artifacts:
      - name: argo-source
        path: /src/example-seldon
        git:
          repo: https://github.com/{{workflow.parameters.github-user}}/example-seldon.git
          revision: "{{workflow.parameters.github-revision}}"
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["cp /src/example-seldon/models/r_mnist/runtime/* /workspace/; ls /workspace/"]
      volumeMounts:
      - name: workspace
        mountPath: /workspace
  - name: build-and-push
    container:
      image: gcr.io/kaniko-project/executor:latest
      args: ["--dockerfile","Dockerfile","--destination","{{workflow.parameters.docker-org}}/rmnistclassifier_runtime:{{workflow.parameters.version}}"]
      workingDir: /src/example-seldon/models/r_mnist/runtime/
      volumeMounts:
      - name: docker-config
        mountPath: "/root/.docker/"
      - name: workspace
        mountPath: /workspace
  - name: seldon
    resource:                   #indicates that this is a resource template
      action: apply             #can be any kubectl action (e.g. create, delete, apply, patch)
      #successCondition: ?
      manifest: |   #put your kubernetes spec here
       apiVersion: "machinelearning.seldon.io/v1alpha2"
       kind: "SeldonDeployment"
       metadata:
         labels:
           app: "seldon"
         name: "mnist-classifier"
       spec:
         annotations:
           deployment_version: "v1"
           project_name: "MNIST Example"
         name: "mnist-classifier"
         predictors:
           -
             annotations:
               predictor_version: "v1"
             componentSpecs:
               -
                 spec:
                   containers:
                     -
                       image: "{{workflow.parameters.docker-org}}/rmnistclassifier_runtime:{{workflow.parameters.version}}"
                       imagePullPolicy: "Always"
                       name: "mnist-classifier"
                       volumeMounts:
                         -
                           mountPath: "/data"
                           name: "persistent-storage"
                   terminationGracePeriodSeconds: 1
                   volumes:
                     -
                       name: "persistent-storage"
                       volumeSource:
                         persistentVolumeClaim:
                           claimName: "nfs-1"
             graph:
               children: []
               endpoint:
                 type: "REST"
               name: "mnist-classifier"
               type: "MODEL"
             name: "mnist-classifier"
             replicas: 1
